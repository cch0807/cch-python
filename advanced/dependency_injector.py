# Dependency Injector로 파이썬 어플리케이션에서 낮은 결합도, 높은 응집도를 가진 코드 만들기!

# 파이썬에서 의존성을 관리하는 우아한 방법이 없을까?

# 의존성이란?
# 두 개의 컴포넌트 사이의 의존성이란 하나의 컴포넌트의 변경 사항이 다른 컴포넌트에도 영향을 미칠 가능성을 의미한다.

# 코드가 복잡해지면 필연적으로 다양한 객체 간의 협력 관계가 만들어진다.
# 협력하기 위해서는 다른 객체가 존재한다는 사실을 알고 있어야 하고,
# 다른 객체가 어떤 방식으로 '메시지'를 수신하는 지도 알아야 한다.
# 이러한 객체의 지식이 의존성을 만든다.

# 어플리케이션 설계가 유연해지려면, 실행 컨텍스트에 대한 구체적인 사항을 최소한으로 지니고 있어야 한다.
# 그래야 기능 추가, 로직 변경 또는 테스트를 작성하는 데도 수월한 코드를 만들 수 있다.

# 암묵적 의존성은 나쁘다.
# 임묵적 의존성은 의존성을 이해하기 위해 코드의 내부 구현을 자세히 이해할 필요를 만든다.
# 때문에 캡슐화를 위반하게 된다.
# 결국 의존성을 객체에 명시적으로 노출시키는 게 더 코드를 읽는 사람으로 하여금 유지보수에 대한 허들을 낮춘다,

# 의존성 주입이란?
# 사용하는 객체가 아닌 외부의 독립적인 객체가 인스턴스를 생성한 후 이를 전달해서 의존성을 해경하는 방법을 의존성 주입이라고 부른다.
# 의존성 주입은 의존성 관리 문제를 해결하는 방법 중 하나이다.
# 대안으로는 Service Locator 패턴 등이 있다 (가장 큰 SL 패턴의 단점은 의존성을 암묵적으로 만든다/감춘다는 데 있다)

# 왜 의존성이 필요한가?
# 객체의 생성을 다른 곳(컨테이너)에서 담당해서 결합도를 낮춘다.
# 낮은 결합도로 변경에 용이하고, 다른 객체와의 협력 관계에 더 집중하게 해준다.
# Fake, Mocking 객체를 주입해 테스트하기 쉽게 만든다.

# 의존성 역전 원칙이란?
# 객체지향의 SOLID 원칙 중 D에 해당하는 원칙으로,
# 첫째, 상위 모듈은 하위 모듈에 의존해서는 안된다. 상위 모듈과 하위 모듈 모두 추상화에 의존해야 한다.
# 둘째, 추상화는 세부 사항에 의존해서는 안된다. 세부사항이 추상화에 의존해야 한다.
# 한 마디로, 유연하고 재사용 가능한 설계를 위해서는 세부 구현사항이 아니라, 추상화에 의존해야 한다는 객체 지향 설계의 중요 원칙이다.
# 때문에 위의 의존성 주입과 연결 지어보자면, 객체는 상위 계층(추상화)에 의존되어 있고, 의존성 주입을 해주는 컨테이너에게
# 유즈케이스에 맞게 세부 객체를 주입해주면 더 유연한 설계가 가능해진다.

# 1차 정리
# 어플리케이션이 고도화되면 다른 객체에 대한 의존성이 늘어난다.
# 의존성을 효과적으로 관리하기 위한 기술로 의존성 주입이 있다.
# 의존성 주입은 낮은 결합도, 변경 및 테스트가능한 코드를 만들어줄 수 있다.
# 저수준의 구현 사항보다, 고수준의 추상화에 의존하면 더 유연한 설계를 만들 수 있다.

# ------------------------------------------------------------------------------------------------------------------

# Django
# settings.py

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'REDIS_URL' + '/1',
    },
    'local': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'snowflake',
    }
}

# 장고에서는 dictionary에 환경 별 dependency를 key-value 형태로 명시하고,
# python duck typing 기능을 활용해서 의존성을 주입한다.
# Pros -> 간결하다
# Cons -> 확장성이 떨어진다.

# ------------------------------------------------------------------------------------------------------------------

# Django Rest Framework

# class FooView(APIView):
#     # The "injected" dependencies:
#     permission_classes = (IsAuthenticated, )
#     throttle_classes = (ScopedRateThrottle, )
#     parser_classes = (parsers.FormParser, parsers.JSONParser, parsers.MultiPartParser)
#     renderer_classes = (renderers.JSONRenderer,)

#     def get(self, request, *args, **kwargs):
#         pass

#     def post(self, request, *args, **kwargs):
#         pass

# DRF에서는 class 기반으로 의존성을 주입한다.
# Pros -> 클래스의 메서드로 기능을 추가할 수 있다.
# Cons -> 웹서버 프레임워크에 강하게 커플링된다.