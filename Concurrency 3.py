# 병행성(Concurrency) - 한 컴퓨터가 여러 일을 동시에 수행 -> 단일 프로그램 안에서 여러일을 쉽게 해결
# 병렬성(Parallelism) - 여러 컴퓨터가 여러 작업을 동시에 수행 -> 속도
# 코루틴(Coroutine)

# 코루틴 : 단일(싱글) 스레드, 스택을 기반으로 동작하는 비동기 작업
# 스레드 : OS 관리, CPU 코어에서 실시간, 시분할 비동기 작업 -> 멀티 스레드
# yield : 메인 <-> 서브
# 코루틴 제어, 상태, 양방향 전송

# 서브루틴, 메인루틴 호출 -> 서브루틴에서 수행(흐름 제어)
# 코루틴 : 루틴 실행 중 중지 (시점 기억) -> 동시성 프로그래밍 
# 코루틴 : 스레드에 비해 오버헤드 감소
# 스레드 : 싱글스레드 -> 멀티스레드 -> 복잡 -> 공유되는 자원 -> 교착 상태 발생 가능성, 컨텍스트 스위칭 비용이 발생, 자원 소비 가능성 증가

# 코루틴 Ex1

def coroutine1():
    print('>>> coroutine started.')
    i = yield
    print('>>> coroutine recived: {}'.format(i))

# 메인 루틴
# 제네레이터 선언
cr1 = coroutine1()

print(cr1)
print(type(cr1))

next(cr1)
next(cr1)
